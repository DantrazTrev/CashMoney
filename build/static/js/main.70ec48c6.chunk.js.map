{"version":3,"sources":["utils/wallet.ts","components/Header.tsx","utils/events.ts","utils/tokens.js","utils/middleware.ts","pages/Lock.tsx","providers/wallet.tsx","providers/connections.tsx","components/Balances.tsx","components/Accounts.tsx","components/QR.tsx","components/Transx.jsx","utils/tranx.ts","pages/Transxs.tsx","components/Password.tsx","components/Send.tsx","components/Walletui.tsx","pages/Wallet.tsx","pages/CreateBox.tsx","pages/Initial.tsx","Popup.tsx","index.tsx","utils/secretboxutils.ts"],"names":["Wallet","seed","accounts","getPublicKeysAsBs58","map","a","publicKey","toBase58","this","accountIndex","length","derivedSeed","bip32","Buffer","derivePath","privateKey","newAccount","Account","nacl","sign","keyPair","fromSeed","secretKey","localStorage","setItem","pubKey","account","undefined","forEach","acc","accountCount","wallet","from","console","log","itr","createAccounts","Header","props","className","text","LockEvent","CustomEvent","getSPLBal","connection","walletAddress","getParsedProgramAccounts","TOKEN_PROGRAM_ID","filters","dataSize","memcmp","offset","bytes","balance","i","parsedAccountInfo","data","mintAddress","token","getTokenValue","currency","URL","fetch","then","json","val","unlockWallet","password","loadMnemonicAndSeed","getWallet","window","dispatchEvent","detail","validatePassword","mnemonic","createWallet","createMnS","createSecretBox","getBalance","getSolBalance","solbalance","splbalance","tokens","solana","value","name","LAMPORTS_PER_SOL","Lock","passwordRef","useRef","Box","component","onSubmit","e","preventDefault","current","display","justifyContent","alignItems","flexDirection","sx","width","height","noValidate","autoComplete","TextField","id","type","inputRef","label","variant","WalletContext","React","createContext","ConnectionContext","ConnectionProvider","Connection","Provider","children","Balances","useState","solBalance","setSolBalance","splBalance","totalBalance","useMemo","useContext","useEffect","bal","marginTop","List","Accounts","anchorEl","setAnchorEl","open","Boolean","handleClose","Button","onClick","event","currentTarget","style","fontSize","fontWeight","accIdx","toString","Menu","onClose","MenuListProps","idx","publickey","MenuItem","selected","setAcc","addAccount","position","top","left","bgcolor","border","boxShadow","p","QR","Modal","setOpen","Transx","transaction","_json","signers","some","signer","_publicKey","Card","signature","margin","padding","backgroundColor","elevation","Typography","amount","fees","overflow","textOverflow","sendTransaction","to","Transaction","add","SystemProgram","transfer","fromPubkey","toPubkey","lamports","sendAndConfirmTransaction","getTransactions","address","getConfirmedSignaturesForAddress2","limit","transactionList","transactions","getConfirmedTransaction","confirmedTransaction","meta","oldBalance","preBalances","newBalance","postBalances","transWithSignature","fee","push","Transxs","setTx","maxHeight","transx","ListItem","Password","error","setError","setMnemonic","catch","align","color","maxWidth","wordWrap","SendTSX","errorString","setErrorstring","amountRef","toRef","emitTrasnx","message","WalletUI","tab","setTab","setaccidx","pass","setPass","trx","setTrx","emitTransx","amt","key","PublicKey","transform","BottomNavigation","showLabels","onChange","newValue","BottomNavigationAction","icon","WalletBase","CreateWallet","Pages","setmnemoic","unq","uid","Initial","Init","page","setPage","Create","m","Import","darkTheme","createTheme","palette","mode","primary","main","dark","contrastText","typography","fontFamily","button","textTransform","App","locked","setLocked","firstUse","setFirstUse","LockListener","UnlockListener","getItem","addEventListener","removeEventListener","ThemeProvider","theme","ReactDOM","createRoot","document","getElementById","render","StrictMode","plaintext","JSON","stringify","salt","randomBytes","kdf","deriveEncryptionKey","iterations","digest","nonce","secretbox","nonceLength","encrypted","bs58","encode","removeItem","sessionStorage","selectedAccount","err","Error","bip39","generateMnemonic","mnemonicToSeed","Promise","resolve","reject","pbkdf2","keyLength","parse","encodedEncrypted","encodedNonce","encodedSalt","decode","decodedPlaintext","derivationPath","Number","importsEncryptionKey","deriveImportsEncryptionKey"],"mappings":"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","file":"static/js/main.70ec48c6.chunk.js","sourcesContent":["import { Account } from '@solana/web3.js';\nimport nacl from 'tweetnacl';\nimport * as bip32 from 'bip32';\n\nexport class Wallet {\n  public seed: Buffer;\n  public accounts: Account[];\n\n  static getWallet(seed: string, accountCount: number): Wallet {\n    const bufSeed = Buffer.from(seed, 'hex');\n    const wallet = new Wallet(bufSeed);\n    console.log(accountCount);\n    for (let itr = 0; itr < accountCount; itr++) {\n      wallet.createAccounts();\n    }\n    return wallet;\n  }\n\n  constructor(seed: Buffer) {\n    this.seed = seed;\n    this.accounts = [];\n  }\n\n  createAccounts() {\n    const accountIndex = this.accounts.length;\n\n    const derivedSeed = bip32\n      .fromSeed(new Buffer(this.seed))\n      .derivePath(`m/44'/501'/${accountIndex}'/0'`).privateKey;\n    const newAccount = new Account(\n      nacl.sign.keyPair.fromSeed(derivedSeed!).secretKey\n    );\n    this.accounts = [...this.accounts, newAccount];\n\n    return newAccount;\n  }\n\n  addAccount() {\n    const accountIndex = this.accounts.length + 1;\n\n    const derivedSeed = bip32\n      .fromSeed(new Buffer(this.seed))\n      .derivePath(`m/44'/501'/${accountIndex}'/0'`).privateKey;\n    const newAccount = new Account(\n      nacl.sign.keyPair.fromSeed(derivedSeed!).secretKey\n    );\n    this.accounts = [...this.accounts, newAccount];\n    localStorage.setItem('accounts', `${accountIndex}`);\n\n    return newAccount;\n  }\n  findAccount(pubKey: string): Account | undefined {\n    let account = undefined;\n    this.accounts.forEach((acc) => {\n      if (acc.publicKey.toBase58() === pubKey) {\n        account = acc;\n      }\n    });\n    return account;\n  }\n\n  getPublicKeysAsBs58 = (): string[] => {\n    return this.accounts.map((a) => a.publicKey.toBase58());\n  };\n}\n","import React from 'react'\nimport './Header.css'\ninterface Props {\n    text: string\n}\nfunction Header(props: Props) {\n    return (\n        <div className='header' >{props.text}</div>\n    )\n}\n\nexport default Header","import { Wallet } from './wallet';\n\nexport const LockEvent = new CustomEvent('lock');\nexport const UnlockEvent = (data: Wallet): CustomEvent<Wallet> => {\n  return new CustomEvent('unlock', { detail: data });\n};\n","import { PublicKey } from '@solana/web3.js';\nimport React, { useEffect, useState } from 'react';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { TokenListProvider, TokenInfo } from '@solana/spl-token-registry';\n\nconst API_URL = 'https://api.coingecko.com/api/v3/';\n\n\n// export async function findAssociatedTokenAddress(\n//   walletAddress: { toBuffer: () => Buffer | Uint8Array },\n//   tokenMintAddress: { toBuffer: () => Buffer | Uint8Array }\n// ) {\n//   return (\n//     await PublicKey.findProgramAddress(\n//       [\n//         walletAddress.toBuffer(),\n//         TokenInstructions.TOKEN_PROGRAM_ID.toBuffer(),\n//         tokenMintAddress.toBuffer(),\n//       ],\n//       ASSOCIATED_TOKEN_PROGRAM_ID\n//     )\n//   )[0];\n// }\n\n\n\n// export function parseTokenAccountData(data) {\n//   let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n//   return {\n//     mint: new PublicKey(mint),\n//     owner: new PublicKey(owner),\n//     amount,\n//   };\n// }\n\n\n\n\nexport const getSPLBal = async (connection, walletAddress) => {\n  const accounts = await connection.getParsedProgramAccounts(\n    TOKEN_PROGRAM_ID,\n    {\n      filters: [\n        {\n          dataSize: 165, // number of bytes\n        },\n        {\n          memcmp: {\n            offset: 32, // number of bytes\n            bytes: walletAddress, // base58 encoded string\n          },\n        },\n      ],\n    }\n  );\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  let balance = accounts.forEach((account, i) => {\n    //Parse the account data\n    const parsedAccountInfo = account.account.data;\n    const mintAddress = parsedAccountInfo[\"parsed\"][\"info\"][\"mint\"];\n    const tokenBalance = parsedAccountInfo[\"parsed\"][\"info\"][\"tokenAmount\"][\"uiAmount\"];\n    //Log results\n    return {\n      token: tokenBalance, mintAddress,\n    }\n\n  });\n  console.log(balance, 'HERE')\n  return balance\n};\n\n\n\nexport const getTokenValue = async (\n  token,\n  currency\n) => {\n  let URL = API_URL + `simple/price?ids=${token}&vs_currencies=${currency}`;\n  let val = await fetch(URL).then(data => data.json());\n  console.log(val)\n  return val[token][currency];\n};\n\nexport const useTokens = () => {\n  const [tokenMap, setTokenMap] = useState(new Map());\n  useEffect(() => {\n    new TokenListProvider().resolve().then(tokens => {\n      const tokenList = tokens.filterByChainId(101).getList();\n      setTokenMap(tokenList.reduce((map, item) => {\n        map.set(item.address, item);\n        return map;\n      }, new Map()));\n    });\n  }, []);\n\n  const getTokenMetadata = (mintAddress) => {\n    let metadata = tokenMap.get(mintAddress)\n    if (metadata)\n      return metadata\n  }\n\n  return { getTokenMetadata };\n}","import {\n  Account,\n  Connection,\n  LAMPORTS_PER_SOL,\n  PublicKey,\n  GetProgramAccountsFilter,\n} from '@solana/web3.js';\nimport { LockEvent, UnlockEvent } from './events';\nimport {\n  createMnS,\n  createSecretBox,\n  loadMnemonicAndSeed,\n} from './secretboxutils';\nimport { getSPLBal, getTokenValue } from './tokens';\nimport { Wallet } from './wallet';\n\nexport const unlockWallet = async (password: string) => {\n  const { seed, accountIndex } = await loadMnemonicAndSeed(password);\n  console.log(seed, accountIndex);\n  const account = Wallet.getWallet(seed, accountIndex);\n  window.dispatchEvent(UnlockEvent(account));\n};\n\nexport const validatePassword = async (\n  password: string\n): Promise<any | Error> => {\n  const { mnemonic, accountIndex } = await loadMnemonicAndSeed(password);\n  return { mnemonic };\n};\n\nexport const lockWallet = (password: string) => {\n  window.dispatchEvent(LockEvent);\n};\n\nexport const createWallet = async (password: string) => {\n  let { mnemonic, seed } = await createMnS();\n  let account = await createSecretBox(mnemonic, seed, password);\n  return { mnemonic, seed, account };\n};\n\nexport const getBalance = async (account: Account, connection: Connection) => {\n  console.log(account);\n  if (account === undefined) return null;\n  let solbalance = await getSolBalance(account, connection);\n  let splbalance = await getSPLBal(connection, account.publicKey);\n\n  return { tokens: splbalance, solana: solbalance };\n};\nexport const getSolBalance = async (\n  account: Account,\n  connection: Connection\n) => {\n  if (account === undefined) return null;\n  let balance = await connection.getBalance(account.publicKey);\n  let value = await getTokenValue('solana', 'usd');\n  return {\n    name: 'solana',\n    value: (balance / LAMPORTS_PER_SOL) * value,\n    token: balance / LAMPORTS_PER_SOL,\n  };\n};\n\nexport interface Token {\n  name: string;\n  token: number;\n  value: number;\n}\n","import React, { useRef } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Header from '../components/Header';\nimport { unlockWallet } from '../utils/middleware';\n\nfunction Lock() {\n    const passwordRef = useRef<HTMLInputElement | undefined>()\n    return (\n        <Box\n            component=\"form\"\n            onSubmit={(e) => {\n                e.preventDefault()\n                if (passwordRef.current?.value)\n                    unlockWallet(passwordRef.current.value)\n            }}\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            flexDirection=\"column\"\n            sx={{\n                width: 400,\n                height: 400,\n            }}\n            noValidate\n            autoComplete=\"off\"\n        >\n            <Header text='cash money Yo' />\n            <TextField id=\"password\" type=\"password\"\n                inputRef={passwordRef}\n                label=\"Password\" variant=\"outlined\" />\n        </Box>\n    );\n}\n\nexport default Lock;\n","import React, { ReactNode, useEffect, useRef } from 'react';\nimport { Wallet } from '../utils/wallet';\n\nexport const WalletContext = React.createContext<{\n    wallet: Wallet | null;\n}>({ wallet: null });\n\ninterface Props {\n    children?: ReactNode,\n    wallet: Wallet\n    // any props that come into the component\n}\n\n\n","import React, { ReactNode } from 'react';\nimport { Connection } from '@solana/web3.js';\n\nexport const ConnectionContext = React.createContext<{\n  connection: Connection | null;\n}>({ connection: null });\n\ninterface Props {\n  children?: ReactNode\n  // any props that come into the component\n}\n\nexport const ConnectionProvider = (props: Props) => {\n  const connection = new Connection(\n    'https://little-clean-snowflake.solana-mainnet.discover.quiknode.pro/e9d3555577675c8162c59ad40f155cbeba3aaa3b/',\n    'confirmed'\n  );\n  return (\n    <ConnectionContext.Provider value={{ connection }}>\n      {props.children}\n    </ConnectionContext.Provider>\n  );\n};\n\n\n\n\n","import { Box, List } from '@mui/material';\nimport { Account } from '@solana/web3.js';\nimport React from 'react'\nimport { ConnectionContext } from '../providers/connections';\nimport { getBalance, getSolBalance, Token } from '../utils/middleware';\nimport Accounts from './Accounts';\nimport Header from './Header';\n\ninterface Props {\n    account: Account | undefined\n}\n\n\nfunction Balances(props: Props) {\n\n    const [solBalance, setSolBalance] = React.useState<Token>({ token: 0, value: 0, name: 'solana' });\n    const [splBalance, setSplBalance] = React.useState<Token[]>([]);\n\n    const totalBalance = React.useMemo(() => {\n        let totalBalance = 0\n        totalBalance += solBalance.value;\n        splBalance.forEach((token: Token) => {\n            totalBalance += token.value\n        })\n        return totalBalance\n    }, [solBalance, splBalance])\n    const { connection } = React.useContext(ConnectionContext);\n\n    React.useEffect(() => {\n        if (props.account && connection) {\n            getBalance(props.account, connection).then((bal) => {\n                console.log(bal, 'ERER')\n                if (bal && bal.solana)\n                    setSolBalance(bal.solana)\n            })\n        }\n\n\n    }, [props.account])\n\n    return (\n        <Box\n            sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'space-between'\n            }}\n        >\n            <Box\n                sx={{\n                    marginTop: 5,\n\n                }}>\n                <Header text={`$ ${totalBalance}`} />\n            </Box>\n            <List>\n\n            </List>\n        </Box>\n    )\n}\n\nexport default Balances","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport { Wallet } from '../utils/wallet';\n\ninterface Props {\n    accIdx: number,\n    wallet: Wallet | null,\n    setAcc: React.Dispatch<React.SetStateAction<number>>\n\n}\n\nexport default function Accounts(props: Props) {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div>\n            <Button\n                id=\"basic-button\"\n                aria-controls={open ? 'basic-menu' : undefined}\n                aria-haspopup=\"true\"\n                aria-expanded={open ? 'true' : undefined}\n                onClick={handleClick}\n            >\n                Accounts\n            </Button>\n            <span style={{\n                fontSize: '8px',\n                display: 'block',\n                fontWeight: '800'\n            }}>{props.wallet?.accounts[props.accIdx].publicKey.toString()}</span>\n            <Menu\n                id=\"basic-menu\"\n                anchorEl={anchorEl}\n                open={open}\n                onClose={handleClose}\n                MenuListProps={{\n                    'aria-labelledby': 'basic-button',\n                }}\n            >\n                {props.wallet?.accounts && props.wallet.accounts.map((acc, idx) => {\n                    let publickey = acc.publicKey.toString()\n                    return (<MenuItem selected={props.accIdx === idx} key={publickey} onClick={() => { props.setAcc(idx); handleClose() }}>{publickey}</MenuItem>\n                    )\n                })}\n                <MenuItem onClick={() => { props.wallet?.addAccount() }}>Add Account</MenuItem>\n            </Menu>\n        </div>\n    );\n}\n\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Modal from '@mui/material/Modal';\nimport { QRCodeSVG } from 'qrcode.react';\n\nconst style = {\n    position: 'absolute' as 'absolute',\n    top: '70px',\n    left: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    width: 200,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n};\n\ninterface Props {\n    open: boolean,\n    setOpen: React.Dispatch<React.SetStateAction<boolean>>\n    publicKey: string | undefined,\n}\n\nexport default function QR(props: Props) {\n    const handleClose = () => props.setOpen(false);\n\n    return (\n        <div>\n            <Modal\n                open={props.open}\n                onClose={handleClose}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n\n                    {props.publicKey && <QRCodeSVG value={props.publicKey} />}\n                </Box>\n            </Modal>\n        </div>\n    );\n}","import React from 'react'\nimport { Card, Typography } from '@mui/material';\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js';\n\nfunction Transx({transaction,account}) {\n   const from = transaction.transaction._json.signers.some(signer=>signer===account._publicKey.toString())\n  return (\n<Card onClick={()=>{window.open(`https://solscan.io/tx/${transaction.signature}`)}} sx={{margin:2,width:250,padding:2,backgroundColor:from?'red':'green'}}elevation={8}>\n   <Typography> {transaction.amount/LAMPORTS_PER_SOL} SOL </Typography> \n   <Typography>Fees: {transaction.fees/LAMPORTS_PER_SOL} </Typography> \n<div style={{overflow: \"hidden\", textOverflow: \"ellipsis\", width: '100'}}> \n   <Typography sx={{textOverflow:'ellipsis',fontSize:10}} >{transaction.signature}</Typography> \n    </div>\n   \n</Card>  )\n}\n\nexport default Transx","import {\n  Account,\n  Connection,\n  PublicKey,\n  ConfirmedSignatureInfo,\n  LAMPORTS_PER_SOL,\n  Transaction,\n  SystemProgram,\n  sendAndConfirmTransaction,\n} from '@solana/web3.js';\n\nexport const sendTransaction = async (\n  connection: Connection | null,\n  from: Account,\n  to: PublicKey,\n  amount: number\n) => {\n  console.log('TRANSCT');\n  if (connection === null) {\n    return;\n  }\n  const transaction = new Transaction().add(\n    SystemProgram.transfer({\n      fromPubkey: from.publicKey,\n      toPubkey: to,\n      lamports: LAMPORTS_PER_SOL * amount,\n    })\n  );\n\n  // Sign transaction, broadcast, and confirm\n  const signature = await sendAndConfirmTransaction(connection, transaction, [\n    from,\n  ]);\n  console.log('SIGNATURE', signature);\n};\n\nexport const getTransactions = async (\n  address: PublicKey,\n  connection: Connection\n) => {\n  let transactionList = await connection.getConfirmedSignaturesForAddress2(\n    address,\n    { limit: 20 }\n  );\n  let transactions = [];\n  for (let i = 0; i < transactionList.length; i++) {\n    const signature = transactionList[i].signature;\n    const confirmedTransaction = await connection.getConfirmedTransaction(\n      signature\n    );\n    if (confirmedTransaction) {\n      const { meta } = confirmedTransaction;\n      if (meta) {\n        const oldBalance = meta.preBalances;\n        const newBalance = meta.postBalances;\n        const amount = oldBalance[0] - newBalance[0];\n        const transWithSignature = {\n          signature,\n          ...confirmedTransaction,\n          fees: meta?.fee,\n          amount,\n        };\n        transactions.push(transWithSignature);\n      }\n    }\n  }\n\n  // let transactionDetails = await connection.getParsedTransactions(\n  //   signatureList,\n  //   { maxSupportedTransactionVersion: 0 }\n  // );\n\n  // let parsedList = transactionList.map(\n  //   (transaction: ConfirmedSignatureInfo, i) => {\n  //     if (!transaction.blockTime) return;\n  //     if (transactionDetails[i] === null) return;\n  //     const transactionInstructions = transactionDetails[i];\n\n  //     const date = new Date(transaction.blockTime * 1000);\n  //     return {\n  //       date,\n  //       signature: transaction.signature,\n  //       status: transaction.confirmationStatus,\n  //       transactionInstructions,\n  //     };\n  //   }\n  // );\n  console.log(transactions);\n\n  return transactions;\n};\n","import { Box, Button, List, ListItem } from '@mui/material';\nimport { Account } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport Header from '../components/Header';\nimport Transx from '../components/Transx';\nimport { ConnectionContext } from '../providers/connections';\nimport { getTransactions } from '../utils/tranx';\n\ninterface Props {\n    account: Account | undefined\n}\n\n\nfunction Transxs(props: Props) {\n\n\n    const [transactions, setTx] = useState<any[]>([])\n    const { connection } = React.useContext(ConnectionContext);\n\n    React.useEffect(() => {\n        if (props.account && connection) {\n            getTransactions(props.account.publicKey, connection).then((bal) => {\n                setTx(bal)\n            })\n        }\n\n\n    }, [props.account])\n\n    return (\n        <Box\n            sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'space-between'\n            }}\n        >\n            <Box\n                sx={{\n                    marginTop: 2,\n\n                }}>\n                <Header text={\"Recent Transcations\"} />\n            </Box>\n\n            <List sx={{ maxHeight: '400px', overflow: \"scroll\" }}>\n                {transactions.map((transx) => {\n                    return (\n                        <ListItem key={transx.signature} >  <Transx transaction={transx} account={props.account} /></ListItem>\n                    )\n                })}\n\n                <ListItem sx={{ justifyContent: 'center' }} key='all'><Button onClick={() => { window.open(`https://solscan.io/account/${props.account?.publicKey.toString()}`) }}>All Transactions</Button></ListItem>\n\n            </List>\n        </Box>\n    )\n}\n\nexport default Transxs","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport { TextField, Typography } from '@mui/material';\nimport { validatePassword } from '../utils/middleware';\nimport { Account } from '@solana/web3.js';\n\nconst style = {\n    position: 'absolute' as 'absolute',\n    top: '70px',\n    left: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    width: 200,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n};\n\ninterface Props {\n    open: boolean,\n    setOpen: React.Dispatch<React.SetStateAction<boolean>>\n    account: Account\n}\n\nexport default function Password(props: Props) {\n    const handleClose = () => props.setOpen(false);\n    const [error, setError] = React.useState(false)\n    const [mnemonic, setMnemonic] = React.useState('')\n\n    const passwordRef = React.useRef<HTMLInputElement | undefined>()\n    return (\n        <div>\n            <Modal\n                open={props.open}\n                onClose={handleClose}\n                component=\"form\"\n                onSubmit={(e) => {\n                    e.preventDefault()\n                    if (passwordRef.current?.value)\n                        validatePassword(passwordRef.current.value).then((val) => {\n                            setError(false)\n                            setMnemonic(val.mnemonic)\n                        }).catch(() => {\n                            setError(true)\n\n                        })\n                }}\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    {mnemonic === '' ? <TextField id=\"password\" type=\"password\"\n                        inputRef={passwordRef}\n                        error={error}\n                        label=\"Password\" variant=\"outlined\" /> : <>\n                        <Typography align='center' color={'white'}>Mnemonic</Typography>\n                        <Typography color={'white'}>{mnemonic}</Typography>\n                        <Typography align='center' color={'white'}>Private Key</Typography>\n                        <Typography maxWidth={200} sx={{ wordWrap: 'break-word' }} height={200} color={'white'}>{props.account.secretKey.toString('hex')}</Typography></>}\n\n                </Box>\n\n\n            </Modal>\n        </div >\n    );\n}","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport { Button, TextField, Typography } from '@mui/material';\nimport { validatePassword } from '../utils/middleware';\n\nconst style = {\n    position: 'absolute' as 'absolute',\n    top: '70px',\n    left: '50px',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    width: 200,\n    bgcolor: 'background.paper',\n    border: '2px solid #000',\n    boxShadow: 24,\n    p: 4,\n};\n\ninterface Props {\n    open: boolean,\n    setOpen: React.Dispatch<React.SetStateAction<boolean>>,\n    emitTrasnx: Function\n}\n\nexport default function SendTSX(props: Props) {\n    const handleClose = () => props.setOpen(false);\n    const [error, setError] = React.useState(false)\n    const [errorString, setErrorstring] = React.useState('')\n\n    const passwordRef = React.useRef<HTMLInputElement | undefined>()\n    const amountRef = React.useRef<HTMLInputElement | undefined>()\n    const toRef = React.useRef<HTMLInputElement | undefined>()\n\n    return (\n        <div>\n            <Modal\n                open={props.open}\n                onClose={handleClose}\n                component=\"form\"\n\n                aria-labelledby=\"modal-modal-title\"\n                aria-describedby=\"modal-modal-description\"\n            >\n                <Box sx={style}>\n                    <TextField id=\"amt\" type=\"number\"\n                        inputRef={amountRef}\n                        error={error}\n                        label=\"Amount (SOL) \" variant=\"outlined\" />\n                    <TextField id=\"amt\" type=\"text\"\n                        inputRef={toRef}\n                        label=\"To \" variant=\"outlined\" />\n                    <TextField id=\"password\" type=\"password\"\n                        inputRef={passwordRef}\n                        error={error}\n                        label=\"Password\" variant=\"outlined\" />\n                    <Typography color=\"red\">{errorString}</Typography>\n                    <Button onClick={() => {\n                        if (passwordRef.current?.value)\n                            validatePassword(passwordRef.current.value).then((val) => {\n                                setError(false)\n                                props.emitTrasnx(toRef.current?.value, amountRef.current?.value).then(() => { }, (e: Error) => { setErrorstring(e.message) })\n                            }).catch(() => {\n                                setError(true)\n                            })\n\n                    }}> Send </Button>\n                </Box>\n            </Modal>\n        </div>\n    );\n}","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport BottomNavigation from '@mui/material/BottomNavigation';\nimport BottomNavigationAction from '@mui/material/BottomNavigationAction';\nimport HomeRoundedIcon from '@mui/icons-material/HomeRounded';\nimport ReceiptLongRoundedIcon from '@mui/icons-material/ReceiptLongRounded';\nimport { WalletContext } from '../providers/wallet';\nimport { ConnectionContext } from '../providers/connections';\nimport Balances from './Balances';\nimport Accounts from './Accounts';\nimport { Button, Modal } from '@mui/material';\nimport QR from './QR';\nimport Transx from '../pages/Transxs';\nimport Password from './Password';\nimport { sendTransaction } from '../utils/tranx';\nimport { PublicKey } from '@solana/web3.js';\nimport SendTSX from './Send';\nimport IosShareIcon from '@mui/icons-material/IosShare';\nexport default function WalletUI() {\n    const [tab, setTab] = React.useState(0);\n    const [accIdx, setaccidx] = React.useState(0);\n    const [open, setOpen] = React.useState(false);\n    const [pass, setPass] = React.useState(false);\n    const [trx, setTrx] = React.useState(false);\n\n    const { wallet } = React.useContext(WalletContext);\n    const { connection } = React.useContext(ConnectionContext);\n\n\n    const emitTransx = async (to: string, amt: number) => {\n        let key = new PublicKey(to)\n        if (wallet)\n            await sendTransaction(connection, wallet?.accounts[accIdx], key, amt)\n\n    }\n\n    return (<>\n        <span style={{ display: 'flex', alignItems: 'center' }}>  <Accounts accIdx={accIdx}\n            wallet={wallet}\n            setAcc={setaccidx} />\n            <IosShareIcon onClick={() => { setPass(true) }} sx={{ transform: 'translate(42px, 5px)' }} /> </span>\n        {tab === 0 && <><Balances account={wallet?.accounts[accIdx]} />\n            <span>  <Button\n                onClick={() => { setTrx(true) }} color='primary' variant=\"contained\">Send</Button>         <Button color='primary' onClick={() => setOpen(true)} variant=\"contained\" >Recieve</Button></span>\n        </>}\n        {tab === 1 && <> <Transx account={wallet?.accounts[accIdx]} /></>}\n        <QR open={open} setOpen={setOpen} publicKey={wallet?.accounts[accIdx].publicKey.toString()} />\n        {wallet && <Password open={pass} setOpen={setPass} account={wallet?.accounts[accIdx]} />}\n        <SendTSX open={trx} setOpen={setTrx} emitTrasnx={emitTransx} />\n        <BottomNavigation\n            showLabels\n            value={tab}\n            sx={{ position: 'relative', width: 'inherit' }}\n            onChange={(event, newValue) => {\n                setTab(newValue);\n            }}\n        >\n            <BottomNavigationAction label=\"Home\" icon={<HomeRoundedIcon />} />\n            <BottomNavigationAction label=\"Transactions\" icon={<ReceiptLongRoundedIcon />} />\n        </BottomNavigation>\n    </>\n    );\n\n\n}","import React, { useContext, useEffect } from 'react';\nimport '../App.css';\nimport WalletUI from '../components/Walletui';\nimport { ConnectionProvider } from '../providers/connections';\n// @ts-ignore  \n\n\n\nfunction WalletBase() {\n    return (\n        <ConnectionProvider>\n            <main className=\"App-header\">\n                <WalletUI />\n\n            </main>\n        </ConnectionProvider >\n\n    );\n}\n\nexport default WalletBase;\n","import React, { useState, useRef } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Header from '../components/Header';\nimport { Button } from '@mui/material';\nimport { uid } from 'uid'\nimport { LockEvent } from '../utils/events';\nimport { createWallet } from '../utils/middleware';\n\nfunction CreateWallet() {\n    const password = useRef<HTMLInputElement | undefined>()\n    const [mnemonic, setmnemoic] = useState('')\n\n    if (mnemonic) {\n        return (<Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            flexDirection=\"column\"\n            sx={{\n                width: 400,\n                height: 400,\n            }\n            }\n        >\n            <Header text={\"Please Save this code\"} />\n            <span style={{ color: 'white', margin: '20px' }}> {mnemonic}</span>\n            <Button onClick={() => {\n                let unq = uid(12)\n                localStorage.setItem('account', unq)\n                window.dispatchEvent(LockEvent)\n\n            }} color='primary' variant=\"contained\">Continue</Button>\n        </Box >)\n    }\n\n    return (\n        <Box\n            component=\"form\"\n            onSubmit={(e) => {\n                e.preventDefault()\n                if (password.current?.value) {\n                    createWallet(password.current?.value).then(({ mnemonic, seed, account }) => {\n                        setmnemoic(mnemonic)\n                        console.log(account)\n                    })\n\n\n                }\n            }}\n            display=\"flex\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            flexDirection=\"column\"\n            sx={{\n                width: 400,\n                height: 400,\n            }}\n            noValidate\n            autoComplete=\"off\"\n        >\n            <Header text={\"Create Password\"} />\n            <TextField id=\"password\" type=\"password\"\n                label=\"Password\" inputRef={password} variant=\"outlined\" />\n        </Box>\n    );\n}\n\nexport default CreateWallet;\n","import React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Header from '../components/Header';\nimport CreateWallet from './CreateBox';\nenum Pages {\n    Init,\n    Create,\n    Import\n}\n\n\nfunction Initial() {\n    const [page, setPage] = useState(Pages.Init)\n    if (page === Pages.Create)\n        return <CreateWallet />\n    else\n        return (\n            <Box\n                component=\"form\"\n                onSubmit={(e) => {\n                    e.preventDefault()\n                }}\n                display=\"flex\"\n                justifyContent=\"center\"\n                alignItems=\"center\"\n                flexDirection=\"column\"\n                sx={{\n                    '& button': { m: 1 },\n                    width: 400,\n                    height: 400,\n                }}\n                noValidate\n                autoComplete=\"off\"\n            >\n                <Header text='cash money Yo' />\n                <Button onClick={() => {\n                    setPage(Pages.Create)\n                }} color='primary' variant=\"contained\">Create a new Wallet</Button>\n                <Button onClick={() => {\n                    setPage(Pages.Import)\n                }} color='primary' variant=\"contained\">Import a wallet</Button>\n            </Box>\n        );\n\n\n}\n\nexport default Initial;\n","import React, { useEffect, useRef, useState } from 'react';\nimport './App.css';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Lock from './pages/Lock';\nimport WalletBase from './pages/Wallet';\nimport Inital from './pages/Initial';\nimport { WalletContext } from './providers/wallet';\nimport { Wallet } from './utils/wallet';\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#8A2BE2',\n      dark: '#8A2BE2',\n      contrastText: '#fff',\n    },\n  },\n  typography: {\n    fontFamily: 'Trebuchet MS',\n    button: {\n      textTransform: 'none',\n      fontWeight: 'bold',\n      fontFamily: 'Trebuchet MS'\n\n    }\n  }\n});\n\nfunction App() {\n  const [locked, setLocked] = useState(true)\n  const [firstUse, setFirstUse] = useState(true)\n  const wallet = useRef<Wallet | null>(null)\n\n  const LockListener = () => {\n    setFirstUse(false);\n    setLocked(true)\n  }\n  const UnlockListener = (e: any) => {\n    setFirstUse(false);\n    setLocked(false)\n    console.log(e)\n    wallet.current = e.detail\n  }\n  useEffect(() => {\n    let account = localStorage.getItem('account');\n    if (account) {\n      setFirstUse(false)\n    }\n    window.addEventListener('lock', LockListener);\n    window.addEventListener('unlock', UnlockListener);\n\n    return () => {\n      wallet.current = null\n\n      window.removeEventListener('lock', LockListener);\n      window.removeEventListener('unlock', UnlockListener);\n\n    }\n  }, [])\n\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <WalletContext.Provider value={{ wallet: wallet.current }}>\n        <div className=\"App\">\n          {firstUse ? <Inital /> :\n            locked ?\n              <Lock />\n              : <WalletBase />}\n        </div>\n      </WalletContext.Provider >\n    </ThemeProvider >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './Popup';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n","import { randomBytes, secretbox } from 'tweetnacl';\nimport bs58 from 'bs58';\nimport { pbkdf2 } from 'crypto';\nimport * as bip32 from 'bip32';\nimport { Wallet } from './wallet';\nexport const login = (password: string) => {};\nexport type MnemonicAndSeed = {\n  mnemonic: string;\n  seed: string;\n};\n\nexport type SecretBox = {\n  nonce: string;\n  kdf: string; // pbkdf2\n  encrypted: string;\n  salt: string;\n  iterations: number;\n  digest: string; //sha256\n};\n\nexport const createSecretBox = async (\n  mnemonic: string,\n  seed: string,\n  password: string,\n  accountIndex: number = 1\n) => {\n  const plaintext = JSON.stringify({ mnemonic, seed, accountIndex });\n  const salt = randomBytes(16);\n  const kdf = 'pbkdf2';\n  const iterations = 100000;\n  const digest = 'sha256';\n  deriveEncryptionKey(password, salt, iterations, digest)\n    .then((key) => {\n      const nonce = randomBytes(secretbox.nonceLength);\n      const encrypted = secretbox(Buffer.from(plaintext), nonce, key);\n\n      localStorage.setItem(\n        'locked',\n        JSON.stringify({\n          encrypted: bs58.encode(encrypted),\n          nonce: bs58.encode(nonce),\n          kdf,\n          salt: bs58.encode(salt),\n          iterations,\n          digest,\n        })\n      );\n      localStorage.setItem('accounts', `${accountIndex}`);\n      localStorage.removeItem('unlocked');\n\n      sessionStorage.removeItem('unlocked');\n\n      let wallet = Wallet.getWallet(seed, accountIndex);\n\n      let selectedAccount = wallet.accounts[0].publicKey.toBase58();\n      console.log(selectedAccount);\n      return selectedAccount;\n    })\n    .catch((err) => {\n      throw new Error(`Unable to encrypt box: ${err}`);\n    });\n};\n\n// export const updateSecretBox = async (accountIndex: number) => {\n//   let { mnemonic, seed } = await loadMnemonicAndSeed(password);\n//   const plaintext = JSON.stringify({ mnemonic, seed, accountIndex });\n//   const salt = randomBytes(16);\n//   const kdf = 'pbkdf2';\n//   const iterations = 100000;\n//   const digest = 'sha256';\n//   deriveEncryptionKey(password, salt, iterations, digest)\n//     .then((key) => {\n//       const nonce = randomBytes(secretbox.nonceLength);\n//       const encrypted = secretbox(Buffer.from(plaintext), nonce, key);\n\n//       localStorage.setItem(\n//         'locked',\n//         JSON.stringify({\n//           encrypted: bs58.encode(encrypted),\n//           nonce: bs58.encode(nonce),\n//           kdf,\n//           salt: bs58.encode(salt),\n//           iterations,\n//           digest,\n//         })\n//       );\n//       localStorage.removeItem('unlocked');\n\n//       sessionStorage.removeItem('unlocked');\n\n//       let wallet = Wallet.getWallet(seed, accountIndex);\n\n//       let selectedAccount = wallet.accounts[0].publicKey.toBase58();\n//       console.log(selectedAccount);\n//       return selectedAccount;\n//     })\n//     .catch((err) => {\n//       throw new Error(`Unable to encrypt box: ${err}`);\n//     });\n// };\n\nexport const createMnS = async (): Promise<MnemonicAndSeed> => {\n  const bip39 = await import('bip39');\n  const mnemonic = bip39.generateMnemonic(128);\n  const seed = await bip39.mnemonicToSeed(mnemonic);\n  return { mnemonic, seed: new Buffer(seed).toString('hex') };\n};\n\nconst deriveEncryptionKey = async (\n  password: any,\n  salt: any,\n  iterations: number,\n  digest: any\n): Promise<any> => {\n  return new Promise((resolve, reject) =>\n    pbkdf2(\n      password,\n      salt,\n      iterations,\n      secretbox.keyLength,\n      digest,\n      (err, key) => (err ? reject(key) : resolve(key))\n    )\n  );\n};\n\nexport async function loadMnemonicAndSeed(password: string) {\n  let locked = localStorage.getItem('locked');\n  if (locked === null) {\n    throw Error('Error in loading accounts');\n  }\n  const {\n    encrypted: encodedEncrypted,\n    nonce: encodedNonce,\n    salt: encodedSalt,\n    iterations,\n    digest,\n  } = JSON.parse(locked);\n  const encrypted = bs58.decode(encodedEncrypted);\n  const nonce = bs58.decode(encodedNonce);\n  const salt = bs58.decode(encodedSalt);\n\n  const key = await deriveEncryptionKey(password, salt, iterations, digest);\n  const plaintext = secretbox.open(encrypted, nonce, key);\n  console.log(plaintext, 'pl');\n  if (!plaintext) {\n    throw new Error('Incorrect password');\n  }\n\n  const decodedPlaintext = Buffer.from(plaintext).toString();\n  const { mnemonic, seed, derivationPath } = JSON.parse(decodedPlaintext);\n\n  sessionStorage.setItem('unlocked', decodedPlaintext);\n  let accountIndex = localStorage.getItem('accounts')\n    ? Number(localStorage.getItem('accounts'))\n    : 1;\n\n  const importsEncryptionKey = deriveImportsEncryptionKey(seed);\n  let data = {\n    mnemonic,\n    seed,\n    importsEncryptionKey,\n    derivationPath,\n    accountIndex,\n  };\n  console.log(data);\n  return { mnemonic, seed, derivationPath, accountIndex };\n}\nfunction deriveImportsEncryptionKey(seed: string) {\n  return bip32.fromSeed(Buffer.from(seed, 'hex')).derivePath(\"m/44'/501'/0'/0'\")\n    .privateKey;\n}\n"],"sourceRoot":""}