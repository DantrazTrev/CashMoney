{"version":3,"sources":["../node_modules/bip39/src/index.js","../node_modules/bip39/src/_wordlists.js"],"names":["Object","defineProperty","exports","value","createHash","require","pbkdf2_1","randomBytes","_wordlists_1","DEFAULT_WORDLIST","_default","INVALID_MNEMONIC","INVALID_ENTROPY","WORDLIST_REQUIRED","normalize","str","lpad","padString","length","binaryToByte","bin","parseInt","bytesToBinary","bytes","map","x","toString","join","deriveChecksumBits","entropyBuffer","CS","hash","update","digest","Array","from","slice","salt","password","mnemonicToEntropy","mnemonic","wordlist","Error","words","split","bits","word","index","indexOf","dividerIndex","Math","floor","entropyBits","checksumBits","entropyBytes","match","entropy","Buffer","entropyToMnemonic","isBuffer","TypeError","binary","mnemonicToSeedSync","mnemonicBuffer","saltBuffer","pbkdf2Sync","mnemonicToSeed","Promise","resolve","then","saltMixin","iterations","keylen","reject","pbkdf2","err","derivedKey","pbkdf2Promise","generateMnemonic","strength","rng","validateMnemonic","e","setDefaultWordlist","language","result","wordlists","getDefaultWordlist","keys","filter","lang","every","_wordlists_2","czech","chinese_simplified","chinese_traditional","korean","french","italian","spanish","japanese","JA","portuguese","english","EN"],"mappings":"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","file":"static/js/3.0a872d3d.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst createHash = require(\"create-hash\");\nconst pbkdf2_1 = require(\"pbkdf2\");\nconst randomBytes = require(\"randombytes\");\nconst _wordlists_1 = require(\"./_wordlists\");\nlet DEFAULT_WORDLIST = _wordlists_1._default;\nconst INVALID_MNEMONIC = 'Invalid mnemonic';\nconst INVALID_ENTROPY = 'Invalid entropy';\nconst INVALID_CHECKSUM = 'Invalid mnemonic checksum';\nconst WORDLIST_REQUIRED = 'A wordlist is required but a default could not be found.\\n' +\n    'Please pass a 2048 word array explicitly.';\nfunction pbkdf2Promise(password, saltMixin, iterations, keylen, digest) {\n    return Promise.resolve().then(() => new Promise((resolve, reject) => {\n        const callback = (err, derivedKey) => {\n            if (err) {\n                return reject(err);\n            }\n            else {\n                return resolve(derivedKey);\n            }\n        };\n        pbkdf2_1.pbkdf2(password, saltMixin, iterations, keylen, digest, callback);\n    }));\n}\nfunction normalize(str) {\n    return (str || '').normalize('NFKD');\n}\nfunction lpad(str, padString, length) {\n    while (str.length < length) {\n        str = padString + str;\n    }\n    return str;\n}\nfunction binaryToByte(bin) {\n    return parseInt(bin, 2);\n}\nfunction bytesToBinary(bytes) {\n    return bytes.map((x) => lpad(x.toString(2), '0', 8)).join('');\n}\nfunction deriveChecksumBits(entropyBuffer) {\n    const ENT = entropyBuffer.length * 8;\n    const CS = ENT / 32;\n    const hash = createHash('sha256')\n        .update(entropyBuffer)\n        .digest();\n    return bytesToBinary(Array.from(hash)).slice(0, CS);\n}\nfunction salt(password) {\n    return 'mnemonic' + (password || '');\n}\nfunction mnemonicToSeedSync(mnemonic, password) {\n    const mnemonicBuffer = Buffer.from(normalize(mnemonic), 'utf8');\n    const saltBuffer = Buffer.from(salt(normalize(password)), 'utf8');\n    return pbkdf2_1.pbkdf2Sync(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n}\nexports.mnemonicToSeedSync = mnemonicToSeedSync;\nfunction mnemonicToSeed(mnemonic, password) {\n    return Promise.resolve().then(() => {\n        const mnemonicBuffer = Buffer.from(normalize(mnemonic), 'utf8');\n        const saltBuffer = Buffer.from(salt(normalize(password)), 'utf8');\n        return pbkdf2Promise(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');\n    });\n}\nexports.mnemonicToSeed = mnemonicToSeed;\nfunction mnemonicToEntropy(mnemonic, wordlist) {\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    const words = normalize(mnemonic).split(' ');\n    if (words.length % 3 !== 0) {\n        throw new Error(INVALID_MNEMONIC);\n    }\n    // convert word indices to 11 bit binary strings\n    const bits = words\n        .map((word) => {\n        const index = wordlist.indexOf(word);\n        if (index === -1) {\n            throw new Error(INVALID_MNEMONIC);\n        }\n        return lpad(index.toString(2), '0', 11);\n    })\n        .join('');\n    // split the binary string into ENT/CS\n    const dividerIndex = Math.floor(bits.length / 33) * 32;\n    const entropyBits = bits.slice(0, dividerIndex);\n    const checksumBits = bits.slice(dividerIndex);\n    // calculate the checksum and compare\n    const entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);\n    if (entropyBytes.length < 16) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length > 32) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    if (entropyBytes.length % 4 !== 0) {\n        throw new Error(INVALID_ENTROPY);\n    }\n    const entropy = Buffer.from(entropyBytes);\n    const newChecksum = deriveChecksumBits(entropy);\n    if (newChecksum !== checksumBits) {\n        throw new Error(INVALID_CHECKSUM);\n    }\n    return entropy.toString('hex');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nfunction entropyToMnemonic(entropy, wordlist) {\n    if (!Buffer.isBuffer(entropy)) {\n        entropy = Buffer.from(entropy, 'hex');\n    }\n    wordlist = wordlist || DEFAULT_WORDLIST;\n    if (!wordlist) {\n        throw new Error(WORDLIST_REQUIRED);\n    }\n    // 128 <= ENT <= 256\n    if (entropy.length < 16) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length > 32) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    if (entropy.length % 4 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    const entropyBits = bytesToBinary(Array.from(entropy));\n    const checksumBits = deriveChecksumBits(entropy);\n    const bits = entropyBits + checksumBits;\n    const chunks = bits.match(/(.{1,11})/g);\n    const words = chunks.map((binary) => {\n        const index = binaryToByte(binary);\n        return wordlist[index];\n    });\n    return wordlist[0] === '\\u3042\\u3044\\u3053\\u304f\\u3057\\u3093' // Japanese wordlist\n        ? words.join('\\u3000')\n        : words.join(' ');\n}\nexports.entropyToMnemonic = entropyToMnemonic;\nfunction generateMnemonic(strength, rng, wordlist) {\n    strength = strength || 128;\n    if (strength % 32 !== 0) {\n        throw new TypeError(INVALID_ENTROPY);\n    }\n    rng = rng || randomBytes;\n    return entropyToMnemonic(rng(strength / 8), wordlist);\n}\nexports.generateMnemonic = generateMnemonic;\nfunction validateMnemonic(mnemonic, wordlist) {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\nexports.validateMnemonic = validateMnemonic;\nfunction setDefaultWordlist(language) {\n    const result = _wordlists_1.wordlists[language];\n    if (result) {\n        DEFAULT_WORDLIST = result;\n    }\n    else {\n        throw new Error('Could not find wordlist for language \"' + language + '\"');\n    }\n}\nexports.setDefaultWordlist = setDefaultWordlist;\nfunction getDefaultWordlist() {\n    if (!DEFAULT_WORDLIST) {\n        throw new Error('No Default Wordlist set');\n    }\n    return Object.keys(_wordlists_1.wordlists).filter((lang) => {\n        if (lang === 'JA' || lang === 'EN') {\n            return false;\n        }\n        return _wordlists_1.wordlists[lang].every((word, index) => word === DEFAULT_WORDLIST[index]);\n    })[0];\n}\nexports.getDefaultWordlist = getDefaultWordlist;\nvar _wordlists_2 = require(\"./_wordlists\");\nexports.wordlists = _wordlists_2.wordlists;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// browserify by default only pulls in files that are hard coded in requires\n// In order of last to first in this file, the default wordlist will be chosen\n// based on what is present. (Bundles may remove wordlists they don't need)\nconst wordlists = {};\nexports.wordlists = wordlists;\nlet _default;\nexports._default = _default;\ntry {\n    exports._default = _default = require('./wordlists/czech.json');\n    wordlists.czech = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_simplified.json');\n    wordlists.chinese_simplified = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/chinese_traditional.json');\n    wordlists.chinese_traditional = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/korean.json');\n    wordlists.korean = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/french.json');\n    wordlists.french = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/italian.json');\n    wordlists.italian = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/spanish.json');\n    wordlists.spanish = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/japanese.json');\n    wordlists.japanese = _default;\n    wordlists.JA = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/portuguese.json');\n    wordlists.portuguese = _default;\n}\ncatch (err) { }\ntry {\n    exports._default = _default = require('./wordlists/english.json');\n    wordlists.english = _default;\n    wordlists.EN = _default;\n}\ncatch (err) { }\n"],"sourceRoot":""}